{"version":3,"sources":["assets/icon-fail.svg","assets/icon-success.svg","utils/verify-checksum.ts","utils/input-hook.ts","utils/split-accounts.ts","utils/get-string-numbers.ts","utils/number-translate.tsx","components/Title.tsx","components/Section.tsx","components/Input.tsx","components/Subtitle.tsx","components/PageChecksum.tsx","components/Textarea.tsx","components/Result.tsx","components/PageListSplitter.tsx","components/PageAccountString.tsx","components/PageSolution.tsx","components/PageNumberTraslator.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","verifyChecksum","list","reverse","reduce","total","number","index","useInput","initialValue","useState","value","setValue","reset","bind","onChange","event","target","splitAccounts","accounts","length","singleLine","replace","text","match","RegExp","getStringNumbers","split","res","item","i","key","Math","floor","MAP","Map","set","map","numberTranslate","t","get","undefined","Title","styled","h2","Section","section","Input","input","h3","Icon","img","PageChecksum","isValid","useCallback","Number","Subtitle","src","iconSuccess","iconFail","Textarea","textarea","Result","pre","props","inline","PageListSplitter","substring","getAccounts","rows","style","width","account","PageAccountString","getNumbers","Badge","div","PageSolution","getResult","stringNumbers","includes","status","join","PageNumberTraslator","transform","maxLength","minLength","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8fdbf6c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-fail.0768d87d.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-success.1d2f229e.svg\";","export default function verifyChecksum(list: number[]) {\n  return (\n    [...list]\n      .reverse()\n      .reduce((total, number, index) => total + (index + 1) * number, 0) % 11 === 0\n    );\n}\n","import { useState } from \"react\";\n\nexport const useInput = (initialValue: string) => {\n  const [value, setValue] = useState(initialValue);\n\n  return {\n    value,\n    setValue,\n    reset: () => setValue(\"\"),\n    bind: {\n      value,\n      onChange: (event: any) => {\n        setValue(event.target.value);\n      },\n    },\n  };\n};\n\nexport default useInput;","export const splitString = (length: number) => (text: string) => {\n  return text.match(new RegExp(\".{1,\" + length + \"}\", \"g\"));\n}\n\nexport default function splitAccounts(accounts: string): string[] | null {\n  const singleLine = accounts.replace(/\\n/g, \"\")\n  return splitString(81)(singleLine);\n}\n","function getStringNumbers(text: string) {\n  return text.split(\"\").reduce((res, item, i) => {\n    const key = Math.floor(i / 3) % 9; \n    res[key] = (res[key] || \"\") + item;\n    return res;\n  }, [] as string[]);\n}\n\nexport default getStringNumbers;","const MAP = new Map();\n\nMAP.set(\" _ \" +\n        \"| |\" +\n        \"|_|\", 0)\n\nMAP.set(\"   \" +\n        \"  |\" +\n        \"  |\", 1)\n\nMAP.set(\" _ \" +\n        \" _|\" +\n        \"|_ \", 2)\n\nMAP.set(\" _ \" +\n        \" _|\" +\n        \" _|\", 3)\n\nMAP.set(\"   \" +\n        \"|_|\" +\n        \"  |\", 4)\n\nMAP.set(\" _ \" +\n        \"|_ \" + \n        \" _|\", 5)\n\nMAP.set(\" _ \" +\n        \"|_\" + \n        \"|_|\", 6)\n\nMAP.set(\" _ \" +\n        \"  |\" +\n        \"  |\", 7)\n\nMAP.set(\" _ \" +\n        \"|_|\" +\n        \"|_|\", 8)\n\nMAP.set(\" _ \" +\n        \"|_|\" +\n        \" _|\", 9)\n\n\nexport const translate = (map: Map<string, number>) => (text: string): number | '?' => {\n  const t = map.get(text)\n  return t !== undefined ? t : '?'\n}\n\nconst numberTranslate = translate(MAP);\n\nexport default numberTranslate","import styled from \"styled-components\"\n\nconst Title = styled.h2`\n  margin: 0 0 2rem;\n  font-size: 3rem;\n  color: var(--satin-sheen-gold);\n  font-family: \"Lobster\", cursive;\n  position: relative;\n\n  &:after {\n    content: \"\";\n    width: 100%;\n    height: 4px;\n    background-color: var(--hookers-green);\n    bottom: 0;\n    position: absolute;\n    left: 0;\n    transform: rotate(-2deg);\n  }\n`\n\nexport default Title","import styled from \"styled-components\"\n\nconst Section = styled.section`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n`\n\nexport default Section","import styled from \"styled-components\"\n\nconst Input = styled.input`\n  border: 2px solid var(--hookers-green);\n  padding: 10px;\n  border-radius: 20px;\n  margin-bottom: 2rem;\n\n  &:focus{\n    outline: none;\n    border-color: var(--satin-sheen-gold)\n  }\n`\n\n\nexport default Input","import styled from \"styled-components\"\n\nconst Title = styled.h3`\n  margin: 0 0 2rem;\n  font-size: 2rem;\n  font-family: \"Lobster\", cursive;\n`\n\nexport default Title","import React, { useCallback } from \"react\"\nimport styled from \"styled-components\"\nimport { useInput, verifyChecksum } from \"../utils\"\nimport iconFail from '../assets/icon-fail.svg';\nimport iconSuccess from '../assets/icon-success.svg';\nimport Title from \"./Title\";\nimport Section from \"./Section\";\nimport Input from \"./Input\";\nimport Subtitle from \"./Subtitle\";\n\nconst Icon = styled.img`\n  width: 30px;\n  height: 30px; \n`\n\nconst PageChecksum: React.FC = () => {\n  const { bind, value } = useInput('457508000')\n  \n  const isValid = useCallback((value: string): boolean => {\n    const arr = value.split('').map(Number)\n    return verifyChecksum(arr)\n  }, [])\n  \n  return (\n    <Section>\n      <Title>CheckSum</Title>\n      <p>\n        I started from the easy thing (I hope I got it right).\n        <br />I created a function to calculate the checksum.\n        <br />The function accept an array of numbers and respond with true/false\n      </p>\n\n      <Input {...bind} />\n\n      <Subtitle>Is valid:</Subtitle>\n\n      {isValid(value) ?\n        <Icon src={iconSuccess} /> :\n        <Icon src={iconFail} />\n      }\n      \n    </Section>\n  )\n}\n\nexport default PageChecksum","import styled from \"styled-components\";\n\nconst Textarea = styled.textarea`\n  border: 2px solid var(--hookers-green);\n  padding: 10px;\n  border-radius: 20px;\n  margin-bottom: 2rem;\n  width: 400px;\n\n  &:focus{\n    outline: none;\n    border-color: var(--satin-sheen-gold)\n  }\n`\n\nexport default Textarea;\n","import styled from \"styled-components\"\n\nconst Result = styled.pre`\n  background-color: var(--hookers-green);\n  padding: 10px;\n  color: var(--misty-moss);\n  border-radius: 20px;\n  display: ${(props: { inline?: boolean }) => props.inline ? 'inline-flex' : 'flex'};\n  margin: 0 0 1rem;\n  & + & {\n    margin-left: ${(props: { inline?: boolean }) => props.inline ? '1rem' : '0'};\n  }\n`\n\nexport default Result","import Section from \"./Section\"\nimport React, { useCallback } from \"react\"\nimport Title from \"./Title\"\nimport { useInput, splitAccounts } from \"../utils\"\nimport Textarea from \"./Textarea\"\nimport Result from \"./Result\"\nimport Subtitle from \"./Subtitle\"\n\nconst PageListSplitter: React.FC = () => {\n  const { bind, value } = useInput(`\n    _  _     _  _  _  _  _ \n  | _| _||_||_ |_   ||_||_|\n  ||_  _|  | _||_|  ||_| _|\n\n _  _  _  _  _  _  _  _  _ \n _| _| _| _| _| _| _| _| _|\n|_ |_ |_ |_ |_ |_ |_ |_ |_ `.substring(1))\n  \n  const getAccounts = useCallback((value: string): string[] | null => {\n    return splitAccounts(value)\n  }, [])\n\n  return (\n    <Section>\n      <Title>Account list splitter</Title>\n      <p>\n        I need a function to (given a list of account numbers)<br />\n        return an array of string containing the single account number.\n        <br /><br />\n        The function get a multiline text,<br />\n        remove the new lines<br />\n        and split the account numbers based on string length\n      </p>\n      \n      <Textarea rows={10} style={{ width: 220 }} {...bind}>{value}</Textarea>\n\n      <Subtitle>Accounts:</Subtitle>\n    \n      {getAccounts(value)?.map(account => (\n        <Result key={account}>{account}</Result>\n      ))}\n    </Section>\n  )\n}\n\nexport default PageListSplitter","import React, { useCallback } from \"react\"\nimport { useInput, getStringNumbers } from \"../utils\"\nimport Title from \"./Title\";\nimport Section from \"./Section\";\nimport Input from \"./Input\";\nimport Result from \"./Result\";\nimport Subtitle from \"./Subtitle\";\n\nconst PageAccountString: React.FC = () => {\n  const { bind, value } = useInput('    _  _     _  _  _  _  _   | _| _||_||_ |_   ||_||_|  ||_  _|  | _||_|  ||_| _|')\n\n  const getNumbers = useCallback((value: string) => {\n    return getStringNumbers(value)\n  }, [])\n\n  return (\n    <Section>\n      <Title>Account String</Title>\n      <p>\n        Given a string rappresenting an account number<br />\n        We now need to extract the characters that compose each account number.\n        The function return an array of number rappresented by strings\n      </p>\n\n      <Input {...bind} style={{ width: 400 }}/>\n\n      <Subtitle>Numbers:</Subtitle>\n\n      <div>\n        {getNumbers(value).map((item, index) => (\n          <Result inline>{item}</Result>\n        ))}\n      </div>\n    </Section>\n  )\n}\n\nexport default PageAccountString","import React, { useCallback } from \"react\"\nimport { useInput, numberTranslate, splitAccounts, getStringNumbers, verifyChecksum } from \"../utils\"\nimport Title from \"./Title\";\nimport Section from \"./Section\";\nimport Result from \"./Result\";\nimport Textarea from \"./Textarea\";\nimport Subtitle from \"./Subtitle\";\nimport styled from \"styled-components\";\n\nconst Badge = styled.div`\n  line-height: 37px;\n  width: 35px;\n  height: 35px;\n  background-color: var(--vegas-gold);\n  font-size: 0.7rem;\n  color: white;\n  margin: -7px;\n  border-radius: 50%;\n  display: inline-block;\n  margin-left: 1rem;\n  font-weight: bold;\n`\n\nconst PageSolution: React.FC = () => {\n  const { bind, value } = useInput(`\n    _  _  _  _  _  _  _  _ \n|_||_   ||_ | ||_|| || || |\n  | _|  | _||_||_||_||_||_|\n\n _  _  _  _  _  _  _  _  _ \n| || || || || || || || || |\n|_||_||_||_||_||_||_||_||_|\n\n                           \n  |  |  |  |  |  |  |  |  |\n  |  |  |  |  |  |  |  |  |\n\n _  _  _  _  _  _  _  _  _ \n _| _| _| _| _| _| _| _| _|\n|_ |_ |_ |_ |_ |_ |_ |_ |_ \n\n _  _  _  _  _  _  _  _  _ \n _| _| _| _| _| _| _| _| _|\n _| _| _| _| _| _| _| _| _|\n                        \n|_||_||_||_||_||_||_||_||_|\n  |  |  |  |  |  |  |  |  |\n\n _  _  _  _  _  _  _  _  _ \n|_ |_ |_ |_ |_ |_ |_ |_ |_ \n _| _| _| _| _| _| _| _| _|\n\n _  _  _  _  _  _  _  _  _ \n|_ |_ |_ |_ |_ |_ |_ |_ |_ \n|_||_||_||_||_||_||_||_||_|\n\n _  _  _  _  _  _  _  _  _ \n  |  |  |  |  |  |  |  |  |\n  |  |  |  |  |  |  |  |  |\n\n _  _  _  _  _  _  _  _  _ \n|_||_||_||_||_||_||_||_||_|\n|_||_||_||_||_||_||_||_||_|\n\n _  _  _  _  _  _  _  _  _ \n|_||_||_||_||_||_||_||_||_|\n _| _| _| _| _| _| _| _| _|\n\n    _  _     _  _  _  _  _ \n  | _| _||_||_ |_   ||_||_|\n  ||_  _|  | _||_|  ||_| _|\n\n _  _  _  _  _  _  _  _    \n| || || || || || || ||_   |\n|_||_||_||_||_||_||_| _|  |\n\n _  _  _  _  _  _  _  _    \n|_||_|| || ||_   |  |  | _ \n  | _||_||_||_|  |  |  | _|\n\n    _  _     _  _  _  _  _ \n  | _| _||_| _ |_   ||_||_|\n  ||_  _|  | _||_|  ||_| _ `.substring(1))\n\n  const getResult = useCallback((value: string) => {\n    return splitAccounts(value)!\n      .map(getStringNumbers)\n      .map(stringNumbers => {\n        const number = stringNumbers.map(numberTranslate)\n\n        const isIll = number.includes('?')\n        if (isIll) return { number, status: 'ILL' }\n\n        const isErr = !verifyChecksum(number as number[])\n        if (isErr) return { number, status: 'ERR' }\n\n        return { number }\n      })\n  }, [])\n\n  return (\n    <Section>\n      <Title>Solution</Title>\n\n      <Textarea rows={10} style={{ width: 220 }} {...bind}>{value}</Textarea>\n\n      <Subtitle>Accounts:</Subtitle>\n      \n      <div>\n        {getResult(value)?.map(({ number, status }) => {\n          const account = number.join('')\n          \n          return (\n            <Result inline key={account} >\n              {account}\n              {status && <Badge>{status}</Badge>}\n            </Result>\n          )\n        })}\n      </div>\n    </Section>\n  )\n}\n\nexport default PageSolution","import React, { useCallback } from \"react\"\nimport { useInput, numberTranslate } from \"../utils\"\nimport Title from \"./Title\";\nimport Section from \"./Section\";\nimport Input from \"./Input\";\nimport Result from \"./Result\";\nimport Subtitle from \"./Subtitle\";\n\n\nconst PageNumberTraslator: React.FC = () => {\n  const { bind, value } = useInput(' _ |_| _|')\n\n  const transform = useCallback((value: string) => {\n    return numberTranslate(value)\n  }, [])\n\n  return (\n    <Section>\n      <Title>Number Traslator</Title>\n      <p>\n        Given a number rappresented by a string,<br />\n        I now trasnform it in a proper number using a map.\n      </p>\n\n      <Input {...bind} maxLength={9} minLength={9}/>\n\n      <Subtitle>Number:</Subtitle>\n\n      <Result>{transform(value)}</Result>\n    </Section>\n  )\n}\n\nexport default PageNumberTraslator","import React from 'react';\nimport { PageChecksum, PageSolution, PageListSplitter, PageAccountString, PageNumberTraslator } from './components';\n\nfunction App() {\n  return (\n    <>\n      <PageChecksum />\n      <PageListSplitter />\n      <PageAccountString />\n      <PageNumberTraslator />\n      <PageSolution />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}